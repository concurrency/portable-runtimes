#INCLUDE "plumbing.module"
#INCLUDE "printreal32.occ"
PROC print.32 (VAL REAL32 v)
  [16] BYTE barr:
  INT total:
  SEQ
    total := 16
    real32toa (v, barr, total)
    SEQ i = 0 FOR total
      serialWrite ([barr[i]])
:
VAL []INT powers IS [10000, 1000, 100, 10, 1]:
PROC serialWriteDecInt (VAL INT n)
  INITIAL INT index IS 0:
  INITIAL INT number IS n:
  INITIAL BOOL neg IS FALSE:
  SEQ
    IF
      n < 0
        SEQ
          neg := TRUE
          number := n * (- 1)
      TRUE
        SKIP
    IF 
      neg 
        serialWrite("-")
      TRUE 
        SKIP
    WHILE (index < 5)
      INT digit:
      SEQ
        digit := number / powers[index]
        number := number REM powers[index]
        digit := digit + (INT '0')
        serialWrite([BYTE digit])
        index := index + 1
    
:

PROC show (CHAN REAL32 position?, rate?, BYTE axis)
  INITIAL REAL32 pos, rat IS 0.0, 0.0:
  WHILE TRUE
    SEQ
      rate ? rat
      serialWrite([axis])
      serialWrite("Rate:")
      print.32 (rat)
      serialWrite ("      ")
      
      position ? pos
      serialWrite([axis])
      serialWrite ("Pos:")
      print.32 (pos)
      serialWrite ("*n")
:
PROC to.degrees (CHAN INT input?, CHAN REAL32 output!)

  INITIAL INT counter, shift, n IS 0, 0, 0:
  INITIAL REAL32 n.32 IS 0.0:
  WHILE TRUE
    SEQ
      input ? n
      IF  
        counter < 11
          SEQ
            serialWriteInt (counter)
            shift := n  
            counter := counter + 1
            --IF statement used to initially zero the reading to whatever the first value is
        TRUE
          SKIP
      n := n - shift
              --n := n * 2 (adc units to degrees per second.)
              -- in milliseconds
      n.32 := REAL32 ROUND n
      n.32 := n.32 * 1.5
      output ! n.32
:
PROC ping (CHAN SIGNAL request!)
  SEQ
    WHILE TRUE
      SEQ
        request ! SIGNAL
        delay(10)
:

PROC filter (CHAN REAL32 input?, CHAN REAL32 position!, rate!, drift?)
  [4]REAL32 filter.arr:
  INITIAL REAL32 current.rate, current.pos, past.pos, error, dt IS 0.0, 0.0, 0.0, 0.0, 0.0:
  
  INITIAL REAL32 start,end, dt IS 0.0, 0.0, 0.0:
  SEQ
    SEQ i=0 FOR 4   -- Initialize the filter with the first 4 values
      SEQ  
        input ? filter.arr[i]
    SEQ
      input ? current.rate
    WHILE TRUE
      --TIMER time:
      SEQ
        
        current.rate := ((current.rate) + ((((filter.arr[0]+ (filter.arr[1] *2.0)) + ((filter.arr[2] *2.0) + filter.arr[3])))/6.0))/2.0
        rate ! current.rate
        
        --drift ? error
        -- We need to multiply the error by the "-" time 
        -- and "current" (rate) by the "+" time between sensor readings to make goodness 
        
        --time ? start
        dt := 0.01 --start - end
        
        current.pos := past.pos + ((error * (-dt)) + (current.rate * dt))
        past.pos := current.pos
        position ! current.pos

        --time ? end 
        
        --serialWriteDecInt (end-start)
        
        filter.arr [0] := filter.arr [1]
        filter.arr [1] := filter.arr [2]
        filter.arr [2] := filter.arr [3]
        filter.arr [3] := current.rate
        input ? current.rate
:
PROC gyro.drift (CHAN REAL32 drift!)
  WHILE TRUE  
    SEQ
      drift ! 0.0
:

PROC main()
  CHAN REAL32 position.gyro0, rate.gyro0, drift.gyro0, degree.gyro0:
  CHAN REAL32 position.gyro1, rate.gyro1, drift.gyro1, degree.gyro1:
  CHAN REAL32 position.gyro2, rate.gyro2, drift.gyro2, degree.gyro2:
  CHAN INT input.gyro0, input.gyro1, input.gyro2:
  CHAN SIGNAL signal.gyro0, signal.gyro1, signal.gyro2:
  BYTE axis.x, axis.y, axis.z: 
  SEQ
    axis.x := 'x'
    axis.y := 'y'
    axis.z := 'z'
    PAR
      PAR
        --gryo 0 "x"
        ping(signal.gyro0!)
        adc(0,signal.gyro0?, input.gyro0!)
        to.degrees(input.gyro0?, degree.gyro0!)
        gyro.drift(drift.gyro0!)
        filter(degree.gyro0?, position.gyro0!, rate.gyro0!, drift.gyro0?)
        show(position.gyro0?, rate.gyro0?, axis.x)
        
    
      PAR
        --gyro 1 "y"
        ping(signal.gyro1!)
        adc(1,signal.gyro1?, input.gyro1!)
        to.degrees(input.gyro1?, degree.gyro1!)
        gyro.drift(drift.gyro1!)
        filter(degree.gyro1?, position.gyro1!, rate.gyro1!, drift.gyro1?)
        show(position.gyro1?, rate.gyro1?, axis.y)
        
      PAR
        --gyro 2 "z"
        ping(signal.gyro2!)
        adc(2,signal.gyro2?, input.gyro2!)
        to.degrees(input.gyro2?, degree.gyro2!)
        gyro.drift(drift.gyro2!)
        filter(degree.gyro2?, position.gyro2!, rate.gyro2!, drift.gyro2?)
        show(position.gyro2?, rate.gyro2?, axis.z)
        
        
        
:
    
