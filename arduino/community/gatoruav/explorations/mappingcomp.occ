#INCLUDE "plumbing.module"
#INCLUDE "maths.module"
VAL []INT powers IS [10000, 1000, 100, 10, 1]:
PROC serialWriteDecInt (VAL INT n)
  INITIAL INT index IS 0:
  INITIAL INT number IS n:
  INITIAL BOOL neg IS FALSE:
  SEQ
    IF
      n < 0
        SEQ
          neg := TRUE
          number := n * (- 1)
      TRUE
        SKIP
    IF 
      neg 
        serial.write.string("-")
      TRUE 
        SKIP
    WHILE (index < 5)
      INT digit:
      SEQ
        digit := number / powers[index]
        number := number REM powers[index]
        digit := digit + (INT '0')
        serial.write.string([BYTE digit])
        index := index + 1
    
:
PROC comp.filter (CHAN INT gyro?, accelerometer?,theta!, VAL INT tau, dt)
  -- gyr is the angular velocity from the gyro
  -- accel is the angle from the accelerometer
  -- dt is the change in time
  -- w is the weight of the gyro
  -- angle is the angle
  INT gyr, accel:
  INITIAL INT angle IS 0:
  WHILE TRUE
    SEQ
      gyro ? gyr
      accelerometer ? accel
    
      accel := accel * (-1) 
      gyr := gyr 
      
      --serialWriteDecInt (gyr)
      --serial.write.string ("     ")
      --serialWriteDecInt (accel)
      --serial.write.string ("*n")
      angle := (((tau * (angle + (gyr * dt))) + (( 100 - tau) * accel))/100)
      theta ! angle
:
PROC show (CHAN INT theta?)
  INITIAL INT pos IS 0:
  WHILE TRUE
    SEQ
      theta ? pos
      --pos := pos
      serialWriteDecInt (pos)
      serial.write.string("*n")

:
PROC to.degrees (CHAN INT input?, CHAN INT output!)

  INITIAL INT counter, shift, n IS 0, 0, 0:
  --INITIAL REAL32 n.32 IS 0.0:
  --INITIAL INT32 n.int32 IS 0:
  WHILE TRUE
    SEQ
      input ? n
      --n.32 := REAL32 ROUND n
      --                was -1.26
      n := (((((n-33)/10230)-13)/30) * 1000)/10
      --n.int32 := INT32 ROUND n.32
      --n := (INT(n.int32))
       
      IF  
        counter < 11
          SEQ
            --serialWriteInt (counter)
            shift := n  
            counter := counter + 1
            --IF statement used to initially zero the reading to whatever the first value is
        TRUE
          SKIP
      n := n - shift
              -- in milliseconds
      output ! n
:

PROC filter (CHAN INT input?, rate!, drift?)
  [4]INT filter.arr:
  INT filtered:
  INITIAL INT current.rate, current.pos, past.pos, error IS 0, 0, 0, 0:
  
  INITIAL INT start,end, dt IS 0, 0, 0:
  SEQ
    SEQ i=0 FOR 4   -- Initialize the filter with the first 4 values
      SEQ  
        input ? filter.arr[i]
    SEQ
      input ? current.rate
    WHILE TRUE
      SEQ
        filtered := (filter.arr[1] + filter.arr[3]) 
        filtered := (filtered + (filter.arr[2] *2))
        filtered := filtered / 4
        current.rate := ((current.rate) + (filtered))/2
        rate ! current.rate
        
        --drift ? error
        -- We need to multiply the error by the "-" time 
        -- and "current" (rate) by the "+" time between sensor readings to make goodness 


        filter.arr [0] := filter.arr [1]
        filter.arr [1] := filter.arr [2]
        filter.arr [2] := filter.arr [3]
        filter.arr [3] := current.rate
        
        input ? current.rate
:
PROC gyro.drift (CHAN INT drift!)
  WHILE TRUE  
    SEQ
      drift ! 0
:
-- 511 520 528 removed to increse sensitivity on -20 to 20 range
VAL [15]INT Y.ADC.GREATER IS [537,545,553,560,567,573,578,584,588,592,595,598,601,602,603]:
-- 495 486 477 removed to increse sensitivity of -20 to 20 range 
VAL [15]INT Y.ADC.LESS IS [469,461,453,445,438,431,426,420,416,411,407,404,401,399,398]:
VAL [15]INT X.ADC.GREATER IS [478,470,463,455,448,442,436,431,427,423,419,416,413,411,410]:
VAL [15]INT X.ADC.LESS IS [542,551,558,566,573,581,587,593,598,603,607,610,613,615,616]:
VAL [15]INT ANGLES IS [20,25,30,35,40,45,50,55,60,65,70,75,80,85,90]:
PROC accel.conv (CHAN INT in?, out!, VAL []INT ADC.GREATER, ADC.LESS)
  WHILE TRUE
    INITIAL BOOL looking IS TRUE:
    INITIAL INT i IS 0:
    INT reading, theta:
    SEQ
      in ? reading
      i := 0
      IF
        (reading <= 528) AND (reading >= 477)
          SEQ
            theta := (((reading * 10) - 5030) / 17) / 10
            out ! theta
        reading > 504
          SEQ
            WHILE i < (SIZE ADC.GREATER)
              IF
                reading <= ADC.GREATER[i]
                  SEQ
                    serialWriteDecInt(i)
                    out ! ANGLES[i]
                    i := (SIZE ADC.GREATER)
                TRUE
                  i := i + 1 

        reading < 504
          SEQ
            WHILE i < (SIZE ADC.LESS)
              IF
                reading >= ADC.LESS[i]
                  SEQ
                    serialWriteDecInt(i)
                    out ! ANGLES[i]
                    i := (SIZE ADC.LESS)
                TRUE
                  i := i + 1
        TRUE
          out ! 0   


:
PROC time.int (CHAN INT v?)
  TIMER tim:
  INT start, end, hole:
  WHILE TRUE
    SEQ
      tim ? start
      SEQ i = 0 FOR 10
        v ? hole
      tim ? end
      serialWriteDecInt(end MINUS start)
      serial.write.string("*n")
:

PROC numspit(CHAN INT out!)
  WHILE TRUE
    SEQ
      INITIAL INT num IS 504:
      out ! num
:
PROC main()
  CHAN INT rate.gyro, input.gyro, drift.gyro, degree.gyro, input.accel, output.accel, theta:
  CHAN SIGNAL signal.gyro, signal.accel:


  PAR
    --gyro 1 "y"
    --tick(100,signal.gyro!)
    tick(1,signal.accel!)
    
    --adc(A1,signal.gyro?, input.gyro!)
    adc(A2,signal.accel?, input.accel!)
    
    --numspit(input.accel!)
    accel.conv(input.accel?, output.accel!, X.ADC.GREATER, X.ADC.LESS)
    
    --to.degrees(input.gyro?, degree.gyro!)
    --gyro.drift(drift.gyro!)
    --filter(degree.gyro?, rate.gyro!, drift.gyro?)
    
    --comp.filter (rate.gyro?, output.accel?, theta!, 80, 7)
    
    --time.int(theta?)
    show (output.accel?)
:
