#INCLUDE "plumbing.module"
--{{{  interrupt-driven serial IO
--{{{  PROC serial.setup
PROC serial.setup (VAL INT32 baud)
  VAL INT32 factor IS (((F.CPU / 16) + (baud / 2)) / baud) - 1:
  VAL [4]BYTE factor.bytes RETYPES factor:

  PLACED [MAX.PORT]BYTE ports 0:
  SEQ
    ports[UBRR0H] := factor.bytes[1]
    ports[UBRR0L] := factor.bytes[0]

    ports[UCSR0C] := 3 << UCSZ00
    ports[UCSR0B] := BV (TXEN0) \/ BV (RXEN0)
:
--}}}
--{{{  PROC serial.write
PROC serial.write (VAL BYTE b)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    IF
      (ports[UCSR0A] /\ BV (UDRE0)) = 0
        --{{{  transmit buffer full; wait for it to empty
        SEQ
          -- Enable the interrupt; UDRIE0 will be cleared by the (C-side)
          -- interrupt handler.
          ports[UCSR0B] := ports[UCSR0B] \/ BV (UDRIE0)
          INT dummy:
          wait.for.interrupt (VINTR.USART.UDRE, dummy)
        --}}}
      TRUE
        SKIP
    ports[UDR0] := b
:
--}}}
--{{{  PROC serial.read
PROC serial.read (RESULT BYTE b)
  PLACED [MAX.PORT]BYTE ports 0:
  #PRAGMA DEFINED ports
  SEQ
    IF
      (ports[UCSR0A] /\ BV (RXC0)) = 0
        --{{{  receive buffer empty; wait for something to come in
        SEQ
          -- Enable the interrupt; RXCIE0 will be cleared by the (C-side)
          -- interrupt handler.
          ports[UCSR0B] := ports[UCSR0B] \/ BV (RXCIE0)
          INT dummy:
          wait.for.interrupt (VINTR.USART.RX, dummy)
        --}}}
      TRUE
        SKIP
    b := ports[UDR0]
:
--}}}
--{{{  PROC serial.tx
PROC serial.tx (CHAN BYTE in?)
  WHILE TRUE
    BYTE b:
    SEQ
      in ? b
      serial.write (b)
:
--}}}
--{{{  PROC serial.rx
PROC serial.rx (CHAN BYTE out!)
  WHILE TRUE
    BYTE b:
    SEQ
      serial.read (b)
      out ! b
:
--}}}
--}}}

PROC generator (CHAN BYTE b!)
  WHILE TRUE
    SEQ
      b ! 'I'
      delay(500)
:

VAL []BYTE init IS [#A0, #A1, #00, #02, #02, #00, #02, #0D, #0A]:

PROC send.command(VAL []BYTE cmd, CHAN BYTE b!)
  SEQ i = 0 FOR (SIZE cmd)
    b ! cmd[i]
:
    

PROC main ()
  [1]BYTE b:
  CHAN BYTE bytes, cmds:    
  
  PAR
    serial.tx(cmds?)
    --send.command(init, cmds!)

    -- LISTENS TO THE GPS
    serial.rx(cmds!)
    
:
