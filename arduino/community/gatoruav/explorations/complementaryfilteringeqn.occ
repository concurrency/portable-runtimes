#INCLUDE "plumbing.module"
#INCLUDE "maths.module"
VAL []INT powers IS [10000, 1000, 100, 10, 1]:
PROC serialWriteDecInt (VAL INT n)
  INITIAL INT index IS 0:
  INITIAL INT number IS n:
  INITIAL BOOL neg IS FALSE:
  SEQ
    IF
      n < 0
        SEQ
          neg := TRUE
          number := n * (- 1)
      TRUE
        SKIP
    IF 
      neg 
        serialWrite("-")
      TRUE 
        SKIP
    WHILE (index < 5)
      INT digit:
      SEQ
        digit := number / powers[index]
        number := number REM powers[index]
        digit := digit + (INT '0')
        serialWrite([BYTE digit])
        index := index + 1
    
:
PROC comp.filter (CHAN INT gyro?, accelerometer?,theta!, VAL INT tau, dt)
  -- gyr is the angular velocity from the gyro
  -- accel is the angle from the accelerometer
  -- dt is the change in time
  -- w is the weight of the gyro
  -- angle is the angle
  INT gyr, accel:
  INITIAL INT angle IS 0:
  WHILE TRUE
    SEQ
      gyro ? gyr
      accelerometer ? accel
    
      accel := accel * (-1) 
      gyr := gyr 
      
      --serialWriteDecInt (gyr)
      --serialWrite ("     ")
      --serialWriteDecInt (accel)
      --serialWrite ("*n")
      angle := (((tau * (angle + (gyr * dt))) + (( 100 - tau) * accel))/100)
      theta ! angle
:
PROC show (CHAN INT theta?)
  INITIAL INT pos IS 0:
  WHILE TRUE
    SEQ
      theta ? pos
      pos := pos
      serialWriteDecInt (pos)
      serialWrite("*n")

:
PROC to.degrees (CHAN INT input?, CHAN INT output!)

  INITIAL INT counter, shift, n IS 0, 0, 0:
  INITIAL REAL32 n.32 IS 0.0:
  INITIAL INT32 n.int32 IS 0:
  WHILE TRUE
    SEQ
      input ? n
      n.32 := REAL32 ROUND n
      n.32 := ((((n.32-3.3)/1023.0)-1.26)/3.0) * 100.0
      n.int32 := INT32 ROUND n.32
      n := (INT(n.int32))
      
      IF  
        counter < 11
          SEQ
            --serialWriteInt (counter)
            shift := n  
            counter := counter + 1
            --IF statement used to initially zero the reading to whatever the first value is
        TRUE
          SKIP
      n := n - shift
              -- in milliseconds
      output ! n
:

PROC filter (CHAN INT input?, rate!, drift?)
  [4]INT filter.arr:
  INT filtered:
  INITIAL INT current.rate, current.pos, past.pos, error IS 0, 0, 0, 0:
  
  INITIAL INT start,end, dt IS 0, 0, 0:
  SEQ
    SEQ i=0 FOR 4   -- Initialize the filter with the first 4 values
      SEQ  
        input ? filter.arr[i]
    SEQ
      input ? current.rate
    WHILE TRUE
      SEQ
        filtered := (filter.arr[1] + filter.arr[3]) 
        filtered := (filtered + (filter.arr[2] *2))
        filtered := filtered / 4
        current.rate := ((current.rate) + (filtered))/2
        rate ! current.rate
        
        --drift ? error
        -- We need to multiply the error by the "-" time 
        -- and "current" (rate) by the "+" time between sensor readings to make goodness 


        filter.arr [0] := filter.arr [1]
        filter.arr [1] := filter.arr [2]
        filter.arr [2] := filter.arr [3]
        filter.arr [3] := current.rate
        
        input ? current.rate
:
PROC gyro.drift (CHAN INT drift!)
  WHILE TRUE  
    SEQ
      drift ! 0
:
PROC accel.conv (CHAN INT in?, out!, VAL INT max, min)
  WHILE TRUE
    INT reading, result:
    REAL32 map:
    SEQ
      in ? reading
      REAL32 num, denom:
      SEQ
        --Gives initial range of 2
        num    := REAL32 ROUND ((reading - min) * 2)
        --serialWriteDecInt (reading)
        --serialWrite("-")
        --serialWriteDecInt(min)
        --serialWrite("=")
        --serialWriteDecInt (reading-min)
        --serialWrite ("*n")
        denom  := REAL32 ROUND (max - min) 
        -- Accelerometer value (normalized to zero) divided by the total range of values (~200) 
        --1 is subtracted from the result of the division to bring the value between -1 and 1
        map    := (num / denom) - 1.0
        map    := ACOS(map)
        --Conversion from radians to degrees and shifting the range to read 'zero' at zero
        map    := (map * (180.0/3.14159)) - 85.0
        result := INT ROUND (map)
        
      out ! result
:

PROC time.int (CHAN INT v?)
  TIMER tim:
  INT start, end, hole:
  WHILE TRUE
    SEQ
      tim ? start
      SEQ i = 0 FOR 10
        v ? hole
      tim ? end
      serialWriteDecInt(end MINUS start)
      serialWrite("*n")
:

PROC main()
  CHAN INT rate.gyro, input.gyro, drift.gyro, degree.gyro, input.accel, output.accel, theta:
  CHAN SIGNAL signal.gyro, signal.accel:


  PAR
    --gyro 1 "y"
    tick(100,signal.gyro!)
    tick(100,signal.accel!)
    
    adc(1,signal.gyro?, input.gyro!)
    adc(2,signal.accel?, input.accel!)
    
    accel.conv(input.accel?, output.accel!, 608, 390)
    
    to.degrees(input.gyro?, degree.gyro!)
    gyro.drift(drift.gyro!)
    filter(degree.gyro?, rate.gyro!, drift.gyro?)
    
    comp.filter (rate.gyro?, output.accel?, theta!, 80, 10)
    
    --time.int(theta?)
    show (theta?)
:
