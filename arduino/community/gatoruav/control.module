--** A set of procedures to fly a plane with
-- @maintainer Ian Armstrong armstri@allegheny.edu
-- @maintainer Anthony Smith smitha7@allegheny.edu

#IF NOT (DEFINED (CONTROL.MODULE))
#DEFINE CONTROL.MODULE
--* This process runs the navigations lights on the plane.The lights are setup via the pin constants in the configuration file
PROC nav.lights()
  SEQ
    digital.mode(LEFT.WING.NAV, OUTPUT) -- Solid navigation lights
    digital.write(LEFT.WING.NAV, 1)
    digital.mode(RIGHT.WING.NAV, OUTPUT)
    digital.write(RIGHT.WING.NAV, 1)
    digital.mode(TAIL.STROBE, OUTPUT)
    digital.write(TAIL.STROBE, 1)
    
    PAR

      SEQ           -- Blinks White strobe LED's in a nice pattern 
        delay (750)
        blink (RIGHT.WING.STROBE, 750)
      SEQ
        blink (LEFT.WING.STROBE, 750)
:

--* This process turns the uav by adjusting the control surfaces via servos.
-- @param position A [@code IMU.DATA] record containing the current pitch and roll of the aricraft.
-- @param bank.angle The angle that Ailerons should be to make the turn
-- @param s The Elevator(pitch) servo
-- @param s2 the Aileron(roll) servo
PROC turn (CHAN IMU.DATA position?, VAL INT bank.angle, CHAN SERVO s, s2)
  INT servo.pos.roll, servo.pos.pitch:
  IMU.DATA pos:
  WHILE TRUE
    SEQ
      position ? pos
      servo.pos.pitch := (pos[pitch] * (-2)) + 90
      s ! pos ; servo.pos.pitch
      servo.pos.roll := (pos[roll] * (-1)) + (bank.angle + 90)
      s2 ! pos ; servo.pos.roll
     
    
:    

--* This acts as a feedback mechanism keeping the airplane in level flight.  As the attitude of the airplane changes, the servos are moved to positions to return the plane to level flight.
-- @param imu A [@code IMU.DATA] record containing the current pitch and roll of the aircraft.
-- @param s The Elevator(pitch) servo
-- @param s2 the Aileron(roll) servo
PROC level.flight (CHAN IMU.DATA imu?, CHAN SERVO s, s2) INT  servo.pos.pitch, servo.pos.roll:
  IMU.DATA pos:
  SEQ
    WHILE TRUE
      SEQ
        imu ? pos
         
        servo.pos.pitch := (pos[pitch] * ((-1) * PITCH.SERVO.MULTIPLIER)) + (90)
        s ! pos ; servo.pos.pitch

        servo.pos.roll := (pos[roll] * ((-1) * ROLL.SERVO.MULTIPLIER)) + 90
        s2 ! pos ; servo.pos.roll              
:

--* This wraps up the setting up of a servo
-- @param s The servo pin
-- @param pos.starting The starting position of the servo  
PROC servo.setup(CHAN SERVO s,VAL INT pos.starting) --Wrapped the initialization of the servo

  SEQ
    s ! min ; 650
    s ! max ; 2350
    s ! div ; 180
    s ! pos ; 0
    s ! start
    s ! pos ; pos.starting
:

#IF FALSE
VAL INT TURN IS 5
PROC turn.to.heading (CHAN ATTITUDE at?, CHAN SIGNAL sig, CHAN SERVO servo.pitch, servo.roll, VAL INT new.heading)
  ATTITUDE attitude:
  INT  servo.pos.pitch, servo.pos.roll:
  WHILE TRUE
    SEQ
      at ? attitude
      IF
        attitude[heading] < (new.heading)
          SEQ
            servo.pos.roll := (pos[roll] * (-2)) + 90 + TURN
            s2 ! pos ; servo.pos.roll
:
#ENDIF
#ENDIF
