--** A library for interacting with a GPS
-- @maintainer Ian Armstrong armstri@allegheny.edu
-- @maintainer Anthony Smith smitha7@allegheny.edu

#IF NOT (DEFINED (GPS.MODULE))
#DEFINE GPS.MODULE
#INCLUDE "convert.module"
VAL [1]BYTE com IS ",":
--* Puts part of a GPS string in section
-- @param gps.in The GPS string to be parsed
-- @param target A [@code BYTE] Array that will be filled with the target chunk
-- of the GPS string
-- @param comma The number of the comma preceding the target chunk
PROC part ([]BYTE gps.in, []BYTE target, VAL INT comma)
  INITIAL INT i, j, num.comma IS 0,0,0:
  --WHILE i < (SIZE (gps.in))
  SEQ 
    WHILE num.comma < comma
      IF
        gps.in [i] = com[0]
          SEQ
            num.comma := num.comma + 1
            i := i + 1
        TRUE
          SEQ
            i := i + 1
            
    WHILE num.comma = comma
      IF 
        gps.in [i] = com[0]
          num.comma := num.comma + 1
        gps.in [i] <> com [0]
          SEQ
            target [j] := gps.in [i]
            j := j + 1
            i := i + 1
        TRUE
          i := i + 1
          
:    

VAL []BYTE target.tag IS "GPVTG":
--* Takes in a GPVTG nmea string and extracts the heading
-- @param buffer The buffer that holds the GPVTG nmea srting. BUFFER.SIZE can be found
-- in uavConfig.module
-- @param course The heading that was in buffer 
PROC gps.course (CHAN [BUFFER.SIZE]BYTE buffer?, CHAN INT course!)
  [5]BYTE heading:
  [5]BYTE nmea.tag:
  INT heading.int:
  BOOL error:
  INITIAL INT pos, len, c IS 0, 0, 0:
  [BUFFER.SIZE] BYTE string:
  
  WHILE TRUE
    SEQ
      c := 0
      buffer ? string
      
      part (string, nmea.tag, 0)

      SEQ i= 0 FOR SIZE(target.tag)
        IF
          nmea.tag [i] = target.tag[i]
            SEQ  
              c := (c +1)

          TRUE 
            SKIP
      IF
        c = (SIZE (target.tag))
          SEQ
            part(string, heading, 1)
            STRINGTOINT(error,heading.int,heading)
            course ! heading.int
        TRUE
          SKIP
:
--* This process reads from a GPS. The serial port the GPS is on is set in uavConfig.module
--@param buffer The buffer the GPS string is put in
PROC gps.reader (CHAN [BUFFER.SIZE]BYTE buffer!)
  SEQ
    --serial.setup(TX0, 57600)
    serial.setup(GPS.PORT, 9600)

    [BUFFER.SIZE]BYTE buff:
    INT leng:
    WHILE TRUE
      SEQ
        serial.buffer.read(GPS.PORT, '$','*n',buff,leng)
        buffer ! buff

        --SEQ i = 0 FOR leng
          --serial.write.byte(TX0, buff[i])

        --serial.write.newline(TX0)

:
#ENDIF
