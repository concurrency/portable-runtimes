--This is an attempt to end all processes before starting a new sequence.
--Currently it does not work.  i need help learning how to "poison" a network




#INCLUDE "plumbing.module"

PROC led.fadeIn (VAL INT pin, millisFadeIn, CHAN SIGNAL in?, kill?, CHAN SIGNAL out!)
  BOOL running:
  SEQ
    in ? SIGNAL
    running := FALSE
    running := TRUE
    WHILE running
      ALT
        in ? SIGNAL
          SEQ i = 0 FOR 100
            SEQ
              analogWrite(pin, (BYTE i))
              delay(millisFadeIn)  
              SEQ
                out ! SIGNAL
        kill ? SIGNAL
          SEQ
            running := FALSE
            running := TRUE
:

PROC led.fadeOut (VAL INT pin, millisFadeOut, CHAN SIGNAL in?, kill?)
  BOOL running:
  SEQ
    in ? SIGNAL
    running := FALSE
    running := TRUE
    WHILE running
      ALT
        in ? SIGNAL
          SEQ i = 100 FOR 100 STEP (-1)
            SEQ
              analogWrite(pin, (BYTE i))
              delay(millisFadeOut)  
              SEQ
                analogWrite(pin, 0)
        kill ? SIGNAL
          SEQ
            running := FALSE
            running := TRUE
:

PROC relay.delay (VAL INT period, CHAN SIGNAL in?, CHAN SIGNAL out3!,out5!,out6!,out9!,out10!,out11!)
  WHILE TRUE
    SEQ
      in ? SIGNAL
      SEQ
        --kill3.fin ! SIGNAL
       -- kill3.fout ! SIGNAL
        out3 ! SIGNAL
        delay(period)
        --kill5.fin ! SIGNAL
       -- kill5.fout ! SIGNAL
        out5 ! SIGNAL
        delay(period + 17)
       -- kill6.fin ! SIGNAL
       -- kill6.fout ! SIGNAL
        out6 ! SIGNAL
        delay(period + 32)
       -- kill9.fin ! SIGNAL
        --kill9.fout ! SIGNAL
        out9 ! SIGNAL
        delay(period + 45)
       -- kill10.fin ! SIGNAL
       -- kill10.fout ! SIGNAL
        out10 ! SIGNAL
        delay(period + 56)
       -- kill11.fin ! SIGNAL
       -- kill11.fout ! SIGNAL
        out11 ! SIGNAL
:

PROC kill.relay (CHAN SIGNAL kill3.fin!,kill5.fin!,kill6.fin!,kill9.fin!,kill10.fin!,kill11.fin!,kill3.fout!,kill5.fout!,kill6.fout!,kill9.fout!,kill10.fout!,kill11.fout!,start?,go!)
  WHILE TRUE
    SEQ
      start ? SIGNAL
      SEQ
        PAR
          kill3.fin ! SIGNAL
          kill5.fin ! SIGNAL
          kill6.fin ! SIGNAL
          kill9.fin ! SIGNAL
          kill10.fin ! SIGNAL
          kill11.fin ! SIGNAL
          kill3.fout ! SIGNAL
          kill5.fout ! SIGNAL
          kill6.fout ! SIGNAL
          kill9.fout ! SIGNAL
          kill10.fout ! SIGNAL
          kill11.fout ! SIGNAL
        SEQ
          go ! SIGNAL

:

PROC beginAnalog.multiPin(VAL INT pinA,pinB,pinC,pinD,pinE,pinF)
  PAR
    beginAnalog(pinA)
    beginAnalog(pinB)
    beginAnalog(pinC)
    beginAnalog(pinC)
    beginAnalog(pinD)
    beginAnalog(pinE)
    beginAnalog(pinF)
:

PROC main()
  CHAN SIGNAL start, go,r.d3,r.d5,r.d6,r.d9,r.d10,r.d11,f.i3,f.i5,f.i6,f.i9,f.i10,f.i11,k.i3,k.o3,k.i5,k.o5,k.i6,k.o6,k.i9,k.o9,k.i10,k.o10,k.i11,k.o11:
  WHILE TRUE
    PAR
      beginAnalog.multiPin(3,5,6,9,10,11)
      button.press(2, start!)
      kill.relay(k.i3!,k.i5!,k.i6!,k.i9!,k.i10!,k.i11!,k.o3!,k.o5!,k.o6!,k.o9!,k.o10!,k.o11!,start?,go!)
      relay.delay(25, go?,r.d3!,r.d5!,r.d6!,r.d9!,r.d10!,r.d11!)
      led.fadeIn(3,7,r.d3?,k.i3?,f.i3!)
      led.fadeIn(5,7,r.d5?,k.i5?,f.i5!)
      led.fadeIn(6,7,r.d6?,k.i6?,f.i6!)
      led.fadeIn(9,7,r.d9?,k.i9?,f.i9!)
      led.fadeIn(10,7,r.d10?,k.i10?,f.i10!)
      led.fadeIn(11,7,r.d11?,k.i11?,f.i11!)
      led.fadeOut(3,10,f.i3?,k.o3?)
      led.fadeOut(5,10,f.i5?,k.o5?)
      led.fadeOut(6,10,f.i6?,k.o6?)
      led.fadeOut(9,10,f.i9?,k.o9?)
      led.fadeOut(10,10,f.i10?,k.o10?)
      led.fadeOut(11,10,f.i11?,k.o11?)
:


