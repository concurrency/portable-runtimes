#INCLUDE "plumbing.module"

PROC adc.pin8 (CHAN SIGNAL req?, CHAN INT val!)
  PLACED [MAX.PORT]BYTE ports 0:
  INT16 result:
  SEQ
    -- Enable ADC; enable interrupt; clock prescale 128
    ports[ADCSRA] := (BV (ADEN) \/ BV (ADIE)) \/ BV (ADPS0)
    -- Disable digital inputs on all six ADC pins
    ports[DIDR0] := #3F
    -- Hacking to try and get the 1280 to read from all adc pins.
    -- FIXME
    ports[DIDR2] := #3F
    WHILE TRUE
      SEQ
        req ? SIGNAL
        ports[ADCSRB] := BV (MUX5) 
        ports[ADMUX] := BV (REFS0) \/ BV (MUX0)

        -- Start conversion
        ports[ADCSRA] := ports[ADCSRA] \/ BV (ADSC)
        WHILE ((ports[ADCSRA] /\ BV(ADSC)) = BV (ADSC))
          SKIP
        
        -- Read value
        -- (We can't do this by retyping ports, since that does a 16-bit read)
        [2]BYTE bytes RETYPES result:
        bytes[0], bytes[1] := ports[ADCL], ports[ADCH]
        
        val ! (INT result)
:

PROC main ()
  CHAN SIGNAL ping:
  CHAN INT val:
  INT tmp:
  PAR 
    tick (100, ping!)
    adc (5, ping?, val!)
    WHILE TRUE
      SEQ
        val ? tmp
        serialWriteInt (tmp)
        serialWrite ("*n")
:
